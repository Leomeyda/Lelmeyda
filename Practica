
#include <stdio.h>
#include <stdlib.h>
enum

int fibonacci (int n);
int conversor(int n);

int main()
{

    int y;
    int n = y = 0;

    do{

        printf("INGRESE UN NUMERO \n");
        scanf("%d", &n);
        if(n<0){
            printf("numero no valido");
        }
    }while(n<0);

    y=conversor(n);







//    int numero=0;
//    printf("Escribe el numero de elementos");
//    scanf("%i", &numero);
//
//    for(int i=1; i<=numero; i++){
//
//        printf("%i, ", fibonacci(i));
//    }

    return 0;

}


int fibonacci (int n){
            if (n==0 || n==1){
            return n;
        }
        else return fibonacci(n-1) + fibonacci(n-2);

}

int conversor(int n){

    if(n==0){
        return 1;
    }
    if (n >=1){
        conversor(n/2);
    }

        int t = n%2;
        printf("%d  ", t);


}

------------------------------------------------------------------------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>

int main()
{


    FILE * archivo = fopen("prueba2.txt", "r");


    while(!feof(archivo)){

        char variable[100] = "";
        fgets(variable,100, archivo); ///Lee hasta que encuentra un salto de linea o un /0



        printf("\n-----> %s", variable);

    }



    fclose(archivo);

    return 0;
}





--------------------------------------------------------------------------------------------------------------------------------

SEGUNDO PARCIAL LUNES

MAIN.C 
#include <stdio.h>
#include <stdlib.h>
#include "empleado.h"

//Funciones y procedimientos ejercicio 1
int elegirOpcion();
int leerTxt();
int pedirNumero();
int pasarABinario(int n);
void guardarNumeroBinario(numeroEnBinario);
enum opcionesEjercicio1 {leer,pedir,binario,guardar,salir};

//Fucniones ejercicio 2
struct Venta{
    int anio;
    int total;
    };
void leerVentas(struct Venta ventas[100]);
void cargarAVentas(struct Venta ventas[100],int contador, char aux[100]);
void mostrarVentas(struct Venta ventas[100]);
int buscarVentas(struct Venta ventas[100], int anio);




int main()
{
    printf("\nBienvenidos al ejercicio 1\n");
    int opcion = elegirOpcion();
    int numeroATransformar = -1;
    int numeroEnBinario = 0;

    while(opcion!=salir){
      switch (opcion){
        case leer: numeroATransformar = leerTxt();opcion = elegirOpcion(); break;
        case pedir: numeroATransformar = pedirNumero();opcion = elegirOpcion();break;
        case binario: numeroEnBinario= pasarABinario(numeroATransformar);opcion = elegirOpcion(); break;
        case guardar: guardarNumeroBinario(numeroEnBinario);opcion = elegirOpcion(); break;

    }

    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    printf("\nBienvenidos al ejercicio 2\n");

    int cantidadEmpleados = 2;
    Empleado empleados[cantidadEmpleados];

    for (int i = 0 ; i<cantidadEmpleados; i++){

        empleados[i] = crearEmpleado();

    }

     for (int i = 0 ; i<cantidadEmpleados; i++){

        mostrar(empleados[i]);

    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    printf("\nBienvenidos al ejercicio 3\n");
    struct Venta ventas[100];//podian leer el archivo y ver cuantas habia, o poner un numero grante
    leerVentas(ventas);
    mostrarVentas(ventas);
    printf("Busco vendas del 2001 ---> Resulado %d\n", buscarVentas(ventas, 2001));
    printf("Busco vendas del 1989 ---> Resulado %d\n", buscarVentas(ventas, 1989));


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    printf("\nBienvenidos al ejercicio 4\n");


    int * puntero1, * puntero2;
    int  vector[10];
    int i = -3;
    for (int k= 0; k<10; k++){
    vector[k] = k +2*i;}

    puntero1 = &vector[3];
    puntero2 = &vector[6];

    for (int k = 0; k<10; k++){
        if(*puntero1 < *puntero2){
        puntero1 = &vector[k];
        vector[k] = vector[k]+3;
            }}
    printf("El resultado era:\n----------- %d", *puntero1);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////

    return 0;
}


int elegirOpcion(){

    int opcion = -9;

    while(opcion!=0&&opcion!=1&&opcion!=2&&opcion!=3&&opcion!=4){
    printf("Por favor ingrese la opcion 0-Leer txt,1-Pedir numero,2-Pasar a binario,3-Guardar Binario  o 4-Salir \n\n");
    scanf("%d",&opcion);
    }
    printf("Usted ha elegido la opcion %d \n\n", opcion);
    return opcion;
}


int leerTxt(){

    int n = 100;



    FILE *archivo;
    archivo = fopen("numero.txt", "r");
    fscanf(archivo, "%d", &n);
    fclose(archivo);
    return n;
}
int pedirNumero(){

    int n = 0;

    while(n<=0){
        printf("Por favor ingresar el numero que quiere transformar a binario >0\n\n");
        scanf("%d", &n);

    }
    return n;
}



int pasarABinario(int n){

     if(n < 2){
        return n;}
        else{
        return (n%2 + (10 * pasarABinario(n/2)));}
}


void guardarNumeroBinario(numeroEnBinario){

    FILE *archivo;
    archivo = fopen("binario.txt", "w");
    fprintf(archivo, "%d", numeroEnBinario);
    fclose(archivo);


}


void leerVentas(struct Venta ventas[100]){

    int contador = 0;
    FILE * archivo;
    archivo = fopen("ventas.txt", "r");

    while(!feof(archivo)){

         if(!feof(archivo)){
        char aux[100]="";
        fgets(aux, 100, archivo) ;


        cargarAVentas(ventas,contador, aux);
        contador = contador+1;
         }




    }

    fclose(archivo);

}

void cargarAVentas(struct Venta ventas[100],int contador, char aux[100]){

         int ubicacionPrimerDelimitador = 0;


        char aux1[100] = "";
        char aux2[100] = "";


        for (int i = 0; i<100; i++){

            if(aux[i]==';'){
                    ubicacionPrimerDelimitador = i;
                    i=100;
            }


        }

         for (int i = 0; i<ubicacionPrimerDelimitador; i++){
            aux1[i] = aux[i];
         }



         int inicioCant = 0;

         for (int i = ubicacionPrimerDelimitador+1; i<100; i++){

         aux2[inicioCant] = aux[i];
         inicioCant++;
         }



         ventas[contador].anio = atoi(aux1);
         ventas[contador].total = atoi(aux2);



}


void mostrarVentas(struct Venta ventas[100]){

    //ojo, ese 3, hay que contarlo del archivo o verificar hasta donde estan cargadas las ventas
    for (int i = 0; i<3; i++){

        printf("%d ---- %d\n", ventas[i].anio, ventas[i].total);
    }

}


int buscarVentas(struct Venta ventas[100], int anio){

    int encontrado = -1;

    for(int i = 0; i<3; i++){

        if(ventas[i].anio == anio){
            encontrado = i;
        }
    }
return encontrado;
}

MAIN.C


EMPLEADO.C EMPLEADO.C EMPLEADO.C EMPLEADO.C EMPLEADO.C EMPLEADO.C

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "empleado.h"


Empleado crearEmpleado(){

    Empleado e = malloc(sizeof(struct estructura));
    int dias;
    char aux[20]="";
    float s;
    float sT;

    printf("Por favor ingrese el nombre \n");
    fflush(stdin);
    gets(aux); //Recordar que siempre es mejor el strcpy

    printf("Ingrese los dias trabajados\n");
    scanf("%d",&dias);

    printf("Ingrese el sueldo diario\n");
    scanf("%f", &s);

    e->dias = dias;
    strcpy(e->nombre, aux);
    e->sueldoDiario = s;
    sT = (e->sueldoDiario)* ((float) (e->dias));
    e->sueldoTotal = sT;



    return e;
}


void destruirEmpleado(Empleado e){free(e);}

char *getNombre(Empleado e){return e->nombre;}
int getDias(Empleado e){return e->dias;}
float getSueldoDiario(Empleado e){return e->sueldoDiario;}
float getSueldoTotal(Empleado e){return e->sueldoTotal;}

void setNombre(Empleado e, char nuevo[20]){
    strcpy(e->nombre, nuevo);}

    //Alteran tambien al total
void setDias(Empleado e, int nuevo){
    e->dias = nuevo;
    e->sueldoTotal = (e->sueldoDiario)* ((float) (e->dias));
    }


void setSueldoDiario(Empleado e, float nuevo){
    e->sueldoDiario = nuevo;
    e->sueldoTotal = (e->sueldoDiario)* ((float) (e->dias));
    }


void mostrar(Empleado e){

    printf("%s ---- %d ---- %f ---- %f\n", e->nombre, e->dias, e->sueldoDiario, e->sueldoTotal);

}

EMPLEADO.C EMPLEADO.C EMPLEADO.C EMPLEADO.C EMPLEADO.C EMPLEADO.C 
 
EMPLEADO.H EMPLEADO.H EMPLEADO.H EMPLEADO.H EMPLEADO.H EMPLEADO.H 

#ifndef EMPLEADO_H_INCLUDED
#define EMPLEADO_H_INCLUDED

//Axiomas
struct estructura {

    char nombre[20];
    int dias;
    float sueldoDiario;
    float sueldoTotal;
};

typedef struct estructura * Empleado;


//pre y post condicoones
Empleado crearEmpleado();
void destruirEmpleado(Empleado e);
void mostrar(Empleado e);

char *getNombre(Empleado e);
int getDias(Empleado e);
float getSueldoDiario(Empleado e);
float getSueldoTotal(Empleado e);

void setNombre(Empleado e, char nuevo[20]);
void setDias(Empleado e, int nuevo);
void setSueldoDiario(Empleado e, float nuevo);
//void setSueldoTotal(......); Este no se hace porque es una variable autocalculable




#endif // EMPLEADO_H_INCLUDED

EMPLEADO.H EMPLEADO.H EMPLEADO.H EMPLEADO.H EMPLEADO.H EMPLEADO.H 



---------------------------------------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

///Busquedas

//Requiere que el algoritmo este ordenado
int busquedaBinaria(int v[], int tam, int dato);
int busquedaSecuencial(int v[], int n, int dato);
int busquedaBinariaR(int v[],int tam,int min, int max, int dato);

///Ordenamientos

void ordenamientoBurbuja(int v[], int m);
void ordenamientoQuickSort(int v[], int inicio, int final);
int particion(int v[], int inicio, int final);
void ordenamientoIntercambio(int v[], int n);
void ordenamientoSeleccion(int v[], int n);
void ordenamientoMergeSort(int v[], int inicio, int final);
void merge(int v[], int inicio, int mitad, int final);
///ETC
void mostrarVector(int v[], int m);
void cambio(int a, int b);

int main()
{
/*
    int a=2, b=3;



    int a[5]={1,3,2,5,4};
    int inf, sup, mitad, dato;
    char bandera = 'F';

int resultado = busquedaBinaria(a,5,9);

printf("Mitad:  %d", resultado);

    mostrarVector(a,5);
printf("\n");
    ordenamientoBurbuja(a,5);

    mostrarVector(a,5);
*/

    int valores[9] = {13, 15, 18,23,32,45,55,81,90};
    int n = 9;

    int resultado = busquedaBinariaR2(valores,13,0,8);
    if (resultado == -1){
        printf(" No se encontro el numero ");
    }else printf("Se encontro el numero");

//
//    printf("-------------------------------------------------");
//
//    ordenamientoSeleccion(b,7);
//    mostrarVector(b,7);
//printf("\n-------------------------------------------------\n");
//
// printf("Se encontro en la posicion numero: %d",  busquedaSecuencial(b,7,11));
/*

    dato=4;
    //Busqueda


    inf=0;
    sup=5;

    while (inf<=sup){
        mitad=(inf+sup)/2;

        if (a[mitad]== dato){
            bandera = 'V';
            break;
        }
        if (a[mitad] > dato){
            sup = mitad;
            mitad = (inf+sup)/2;
        }
        if (a[mitad] < dato){
            inf = mitad;
            mitad = (inf+sup)/2;
        }
    }
    if (bandera == 'F'){
        printf("El numero no existe\n");
    }
    else if (bandera == 'V')
        printf("El numero existe, en la posicion: -> %d <-\n", mitad);
*/
    return 0;
}

void ordenamientoSeleccion(int v[], int tam){

    int indiceMenor=0;
    int aux;

        for(int i=0; i<tam-1; i++){
                indiceMenor=i;
            for(int j=i+1; j<tam; j++){
                if(v[j]== v[indiceMenor]){
                    indiceMenor = j;
                }
            }
          aux = v[i];
          v[i] = v[indiceMenor];
          v[indiceMenor] = aux;
        }


}


int busquedaSecuencial(int v[], int tam, int datoaBuscar){

    char bandera = 'F';
    int pos=0;
    int opcion=1;
        for(int i=0; (i<tam && bandera=='F'); i++){
            if(v[i] == datoaBuscar){
                datoaBuscar = v[i];
                bandera = 'V';
                pos = i;


                printf("Que le gustaria retornar?, la posicion, o el numero encontrado?\nOpcion 1: Numero encontrado\nOpcion2: Posicion del numero encontrado");
                scanf("%d", &opcion);
                if(opcion == 1){
                    return pos;
                }else return datoaBuscar;

            }
        }

}


int busquedaBinariaR2(int valores[], int objetivo, int primero, int ultimo){


    if (ultimo >= primero){
        int central = primero + (ultimo-primero)/2;

        if(valores[central] == objetivo){
            return central;
        }

        if (valores[central] > objetivo){
            return busquedaBinariaR2(valores, objetivo, primero, central-1);
        }

            return busquedaBinariaR2(valores, objetivo, central + 1, ultimo);
    }

    return -1;

}


int busquedaBinariaR(int v[],int tam,int min, int max,int dato){


    int recurse(min,max){

    if(min > max){
    int mitad=((min+max)/2);

    if (v[mitad] == dato){
        return mitad;
    }
    if (v[mitad] > dato){
        return recurse(min, mitad-1);
    }
        return recurse(mitad + 1, max);

    }



    return recurse(0, tam - 1);
    }

    return -1;
}




int busquedaBinaria(int v[], int tam, int dato){

int inf, sup, mitad;
    inf=0;
    sup=tam-1;

    while (inf<=sup){
        mitad =((sup-inf)/2)+inf;
        if (dato==v[mitad]){
            return mitad;
        }
        if (dato<v[mitad]){
            sup=mitad-1;
        }
        else{
            inf=mitad+1;
        }

    }

return -1;

};


void ordenamientoBurbuja(int v[], int tam){

    int aux=0;

    for (int i=0;i<tam;i++){
        for(int j=0; j<tam-1;j++){
            if (v[j]>v[j+1]){
                aux=v[j];
                v[j]=v[j+1];
                v[j+1]=aux;
            }
        }
    }

}

void mostrarVector(int v[], int m){

for (int i=0;i<m;i++){
    printf("\n %d ", v[i]);
}

}

void ordenamientoQuickSort(int v[], int inicio, int final){
    if(inicio < final){
        int pivot = particion(v, inicio, final);
        ordenamientoQuickSort(v, inicio, pivot-1);
        ordenamientoQuickSort(v, pivot+1, final);
    }

}

int particion(int v[], int inicio, int final){

int aux=0;
    int pivot = v[inicio];
    int i = inicio + 1;

    for (int j=i; j<=final; j++){
        if(v[j] < pivot){
             aux=v[i];
                v[i]=v[j];
                v[j]=aux;
                i++;
            }

    }
    aux=v[inicio];
    v[inicio]=v[i-1];
    v[i-1]=aux;
    return i-1;
}
//
//v[j]=aux;
//v[j+1]=v[j];
//v[j+1]=aux
//


void ordenamientoIntercambio(int v[], int n){

    int aux=0;

    for (int i=0; i<n-1;i++){
        for (int j= i+1; j<n;j++){
            if (v[j] < v[i]){
            aux=v[j];
            v[j]=v[i];
            v[i]=aux;
            }
        }
    }
};

void cambio(int a, int b){

int aux= a;
a=b;
b=aux;

}

void ordenamientoInsercion(int v[], int n){

    for (int i=1; i<n;i++){
        int j=i;
        int aux=v[i];

        while(j > 0 && aux < v[j-1]){
            v[j]=v[j-1];
            j--;
        }
        v[j]=aux;
    }
}




void ordenamientoMergeSort(int v[], int inicio, int final){
    if (inicio<final){
        int mitad = inicio + (final-inicio)/2;
        ordenamientoMergeSort(v,inicio,mitad);
        ordenamientoMergeSort(v,mitad+1,final);
        merge(v,inicio,mitad,final);
    }

}

void merge(int v[], int inicio, int mitad, int final){
    int i,j,k;
    int elementosIzq = mitad - inicio + 1;
    int elementosDer = final - mitad;


    int izquierda[elementosIzq];
    int derecha[elementosDer];

    for (int i=0; i<elementosIzq;i++){
        izquierda[i] = v[inicio+i];
    }
    for (int j=0; j<elementosDer; j++){
        derecha[j] = v[mitad+1+j];
    }

    i=0;
    j=0;
    k = inicio;

    while (i < elementosIzq && j < elementosDer){
        if(izquierda[i] <= derecha[j]){
            v[k] = izquierda[i];
            i++;
        } else {
            v[k] = derecha[j];
            j++;
        }
        k++;
    }

    while (j < elementosDer){
        v[k] = derecha[j];
        j++;
        k++;
    }

    while (i < elementosIzq){
        v[k] = izquierda[i];
        i++;
    }

}



int chequeoRepeticion(int v[], int tam, int numeroAleatorio){

    int parar=0;

        for(int i=0; (i<tam && parar==0); i++){
            if(v[i]== numeroAleatorio){
                parar=1;
            }
        }
        return parar;



}






